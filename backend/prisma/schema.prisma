// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int    @id @default(autoincrement())
  firstname    String @db.VarChar(30)
  lastname     String @db.VarChar(30)
  email        String @unique @db.VarChar(50)
  phone_number String @unique @db.Char(10)
  user_name    String @unique @db.VarChar(50)
  password     String @db.VarChar(255)
  role         Role   @default(CUSTOMER)

  staff    Staff?
  customer Customer?
}

model Staff {
  id           Int    @id @default(autoincrement())
  wages        Float  @db.DoublePrecision
  bank_company Bank   @default(KASIKORN)
  bank_account String @unique

  userId          Int              @unique
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies         ChatLog[]
  cares           Care[]
  staffOnServices StaffOnService[]
  roomStaff       RoomStaff[]
}

model Customer {
  id Int @id @default(autoincrement())

  userId   Int       @unique
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats    ChatLog[]
  pets     Pet[]
  bookings Booking[]
  payments Payment[]
}

model ChatLog {
  id          Int       @id @default(autoincrement())
  review      String?   @db.Text
  reply       String?   @db.Text
  rating      Float?    @default(5) @db.DoublePrecision
  review_date DateTime  @default(now()) @db.Timestamp(0)
  reply_date  DateTime? @db.Timestamp(0)

  customerId Int?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  staffId    Int?
  staff      Staff?    @relation(fields: [staffId], references: [id], onDelete: SetNull)
  serviceId  Int?
  service    Service?  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  roomId     Int?
  room       Room?     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Pet {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(30)
  sex      Sex       @default(MALE)
  age      Int
  type     PetType   @default(DOG)
  status   PetStatus @default(QUEUE)
  breed    String    @db.VarChar(30)
  disease  String[]  @db.VarChar(30)
  allergic String[]  @db.VarChar(30)
  picture  String

  scheduled  BookedService[]
  stayed     BookedRoom[]
  customerId Int
  customer   Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  cares      Care[]
}

model Room {
  id       Int      @id @default(autoincrement())
  capacity Int      @default(1) @db.Integer
  price    Float    @default(2000.00) @db.DoublePrecision
  picture  String[]
  petType  PetType  @default(DOG)

  bookings     BookedRoom[]
  staffOnRooms RoomStaff[]
  ChatLog      ChatLog[]
}

model BookedRoom {
  id       Int      @id @default(autoincrement())
  checkIn  DateTime @db.Timestamp(0)
  checkOut DateTime @db.Timestamp(0)

  roomId    Int
  room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  petId     Int?
  pet       Pet?    @relation(fields: [petId], references: [id], onDelete: SetNull)
  bookingId Int
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Service {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(30)
  price   Float     @default(500.00) @db.DoublePrecision
  petType PetType[]
  picture String

  reviews         ChatLog[]
  staffOnServices StaffOnService[]
  bookedServices  BookedService[]
}

model BookedService {
  id Int @id @default(autoincrement())

  serviceId  Int
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  petId      Int?
  pet        Pet?     @relation(fields: [petId], references: [id], onDelete: SetNull)
  scheduled  DateTime @db.Timestamp(0)
  booking_id Int
  booking    Booking  @relation(fields: [booking_id], references: [id], onDelete: Cascade)
}

model Booking {
  id     Int           @id @default(autoincrement())
  date   DateTime      @db.Timestamp(0)
  status BookingStatus @default(PENDING)

  booked_service BookedService[]
  booked_room    BookedRoom[]
  customerId     Int?
  customer       Customer?       @relation(fields: [customerId], references: [id], onDelete: SetNull)

  payment        Payment?
  customerName   String   @db.VarChar(60)
  customerEmail  String   @db.VarChar(50)
  customerNumber String   @db.Char(10)
}

model Payment {
  id     Int           @id @default(autoincrement())
  cost   Float         @db.DoublePrecision
  date   DateTime
  status PaymentStatus @default(PENDING)

  bookingId  Int?      @unique
  booking    Booking?  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  customerId Int?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  customerName   String @db.VarChar(60)
  customerEmail  String @db.VarChar(50)
  customerNumber String @db.Char(10)
}

model Care {
  start_period DateTime @default(now()) @db.Timestamp(0)
  end_period   DateTime @db.Timestamp(0)

  staff_id Int
  staff    Staff @relation(fields: [staff_id], references: [id], onDelete: Cascade)
  pet_id   Int
  pet      Pet   @relation(fields: [pet_id], references: [id], onDelete: Cascade)

  @@unique([staff_id, pet_id])
}

model StaffOnService {
  staffId   Int
  serviceId Int

  staff   Staff   @relation(fields: [staffId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([staffId, serviceId])
}

model RoomStaff {
  roomId  Int
  staffId Int

  room  Room  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@id([roomId, staffId])
}

enum Role {
  STAFF
  CUSTOMER
}

enum Bank {
  KASIKORN
  SCB
  KRUNGTHAI
}

enum PetType {
  DOG
  CAT
  MOUSE
  RABBIT
  BIRD
}

enum Sex {
  MALE
  FEMALE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum BookingStatus {
  PENDING
  BOOKED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}

enum PetStatus {
  IDLE
  QUEUE
  IN_PROGRESS
  COMPLETED
}
