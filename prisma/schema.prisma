// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model USER {
  id              Int       @id @default(autoincrement())
  firstname       String    @db.VarChar(30)
  lastname        String    @db.VarChar(30)
  email           String    @unique @db.VarChar(50)
  phone_number    String    @unique@db.Char(10)
  user_name       String    @unique @db.VarChar(50) 
  password        String    @db.VarChar(100)
  role            Role      @default(CUSTOMER)

  staff           STAFF?
  customer        CUSTOMER?
}

model STAFF{
  staff_id        Int       @id @default(autoincrement())
  wages           Float     @db.DoublePrecision
  bank_company    Bank      @default(KASIKORN)
  bank_account    String    @unique

  userId          Int       @unique
  user            USER      @relation(fields: [userId], references: [id])
}

model CUSTOMER{
  id              Int       @id @default(autoincrement())
  user            USER      @relation(fields: [id], references: [id])
}

model CHATLOG{
  id              Int       @id @default(autoincrement())
  rating          Float?    @default(5) @db.DoublePrecision
  date            DateTime  @default(now()) @db.Timestamptz(0)
  text            String?   @db.Text
}

model PET{
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(30)
  type            PetType   @default(DOG)
  sex             Sex       @default(MALE)
  breed           String    @db.VarChar(30)
  disease         String[]  @db.VarChar(30)
  allergic        String[]  @db.VarChar(30)
  picture         Bytes     @db.ByteA
  scheduled       BOOKED_SERVICE[]
  stayed          BOOKED_ROOM[]
}

model SERVICES{
  id              Int       @id @default(autoincrement())

}

model ROOM{
  id              Int       @id @default(autoincrement())
  capacity        Int       @default(1) @db.Integer
  price           Float     @default(2000.00) @db.DoublePrecision
  picture         Bytes[]   @db.ByteA
  stayed          BOOKED_ROOM[]
}

model BOOKED_ROOM {
  id              Int       @id @default(autoincrement())
  roomId          Int
  room            ROOM      @relation(fields: [roomId], references: [id])
  petId           Int
  pet             PET       @relation(fields: [petId], references: [id])
  startTime       DateTime  @db.Timestamptz(0)
  endTime         DateTime  @db.Timestamptz(0)
  booking_id      Int
  booking         BOOKING   @relation(fields: [booking_id], references: [id])
}

model SERVICE{
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(30)
  price           Float     @default(500.00) @db.DoublePrecision
  queue           BOOKED_SERVICE[]  

}

model BOOKED_SERVICE {
  id              Int       @id @default(autoincrement())  
  serviceId       Int     
  service         SERVICE   @relation(fields: [serviceId], references: [id])
  petId           Int
  pet             PET       @relation(fields: [petId], references: [id])
  scheduled       DateTime  @db.Timestamptz(0)
  booking_id      Int
  booking         BOOKING   @relation(fields: [booking_id], references: [id])
}

model BOOKING{
  id              Int       @id @default(autoincrement()) 
  booking_date    DateTime  @db.Timestamptz(0)
  booking_status  BookingStatus @default(PENDING)

  booked_service  BOOKED_SERVICE[]
  booked_room     BOOKED_ROOM[]
}

model PAYMENT{
  id              Int       @id @default(autoincrement())
  cost            Float     @db.DoublePrecision
  bookingFlag     Boolean
  date            DateTime
  status          PaymentStatus @default(PENDING)
}

enum Role {
  STAFF
  CUSTOMER
}

enum Bank {
  KASIKORN
  SCB
  KRUNGTHAI
}

enum PetType {
  DOG
  CAT
  MOUSE
  RABBIT
  BIRD
}

enum Sex {
  MALE
  FEMALE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum BookingStatus {
  PENDING
  BOOKED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}