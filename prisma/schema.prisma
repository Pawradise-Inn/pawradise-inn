// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model USER {
  id              Int       @id @default(autoincrement())
  firstname       String    @db.VarChar(30)
  lastname        String    @db.VarChar(30)
  email           String    @unique @db.VarChar(50)
  phone_number    String    @unique@db.Char(10)
  user_name       String    @unique @db.VarChar(50) 
  password        String    @db.VarChar(255)
  role            Role      @default(CUSTOMER)

  staff           STAFF?
  customer        CUSTOMER?
}

model STAFF{
  id              Int       @id @default(autoincrement())
  wages           Float     @db.DoublePrecision
  bank_company    Bank      @default(KASIKORN)
  bank_account    String    @unique

  userId          Int       @unique
  user            USER      @relation(fields: [userId], references: [id])
  replies         CHATLOG[]
  cares           CARE[]
  staffOnServices STAFF_ON_SERVICE[]
  ROOM_STAFF      ROOM_STAFF[]
}

model CUSTOMER{
  id              Int       @id

  userId          Int       @unique
  user            USER      @relation(fields: [userId], references: [id])
  chats           CHATLOG[]
  pets            PET[]
  bookings        BOOKING[]
  payments        PAYMENT[]
}

model CHATLOG{
  id              Int       @id @default(autoincrement())
  review          String?   @db.Text
  reply           String?   @db.Text
  rating          Float?    @default(5) @db.DoublePrecision
  review_date     DateTime  @default(now()) @db.Timestamptz(0)
  reply_date      DateTime? @db.Timestamptz(0)

  customerId      Int
  customer        CUSTOMER  @relation(fields: [customerId], references: [id])
  staffId         Int?
  staff           STAFF?    @relation(fields: [staffId], references: [id])
  serviceId       Int
  service         SERVICE   @relation(fields: [serviceId], references: [id])

  @@unique([customerId, serviceId])
}

model PET{
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(30)
  sex             Sex       @default(MALE)
  age             Int
  type            PetType   @default(DOG)
  breed           String    @db.VarChar(30)
  disease         String[]  @db.VarChar(30)
  allergic        String[]  @db.VarChar(30)
  picture         Bytes     @db.ByteA

  scheduled       BOOKED_SERVICE[]
  stayed          BOOKED_ROOM[]
  customerId      Int
  customer        CUSTOMER  @relation(fields: [customerId], references: [id])
  cares           CARE[]
}

model ROOM{
  id              Int       @id @default(autoincrement())
  capacity        Int       @default(1) @db.Integer
  price           Float     @default(2000.00) @db.DoublePrecision
  picture         Bytes[]   @db.ByteA

  bookings        BOOKED_ROOM[]
  staffOnRooms    ROOM_STAFF[]
}

model BOOKED_ROOM {
  id              Int       @id @default(autoincrement())
  startTime       DateTime  @db.Timestamptz(0)
  endTime         DateTime  @db.Timestamptz(0)

  roomId          Int
  room            ROOM      @relation(fields: [roomId], references: [id])
  petId           Int
  pet             PET       @relation(fields: [petId], references: [id])
  bookingId       Int
  booking         BOOKING   @relation(fields: [bookingId], references: [id])
}

model SERVICE{
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(30)
  price           Float     @default(500.00) @db.DoublePrecision
  picture         Bytes     @db.ByteA

  reviewId        Int?
  reviews         CHATLOG[]
  staffOnServices STAFF_ON_SERVICE[]
  bookedServices  BOOKED_SERVICE[]
}

model BOOKED_SERVICE {
  id              Int       @id @default(autoincrement())  
  
  serviceId       Int     
  service         SERVICE   @relation(fields: [serviceId], references: [id])
  petId           Int
  pet             PET       @relation(fields: [petId], references: [id])
  scheduled       DateTime  @db.Timestamptz(0)
  booking_id      Int
  booking         BOOKING   @relation(fields: [booking_id], references: [id])
}

model BOOKING{
  id              Int       @id @default(autoincrement()) 
  booking_date    DateTime  @db.Timestamptz(0)
  booking_status  BookingStatus @default(PENDING)

  booked_service  BOOKED_SERVICE[]
  booked_room     BOOKED_ROOM[]
  customerId      Int
  customer        CUSTOMER  @relation(fields: [customerId], references: [id])

  PAYMENT         PAYMENT?
}

model PAYMENT{
  id              Int       @id @default(autoincrement())
  cost            Float     @db.DoublePrecision
  date            DateTime
  status          PaymentStatus @default(PENDING)

  bookingId       Int       @unique
  booking         BOOKING   @relation(fields: [bookingId], references: [id])
  customerId      Int
  customer        CUSTOMER  @relation(fields: [customerId], references: [id])
}

model CARE{
  id              Int       @id @default(autoincrement())
  start_period    DateTime  @default(now()) @db.Timestamptz(0)
  end_period      DateTime  @db.Timestamptz(0)

  staff_id        Int
  staff           STAFF     @relation(fields: [staff_id], references: [id])
  pet_id          Int
  pet             PET       @relation(fields: [pet_id], references: [id])
  @@unique([staff_id, pet_id])
}

model STAFF_ON_SERVICE {
  staffId         Int
  serviceId       Int

  staff           STAFF     @relation(fields: [staffId], references: [id])
  service         SERVICE   @relation(fields: [serviceId], references: [id])

  @@id([staffId, serviceId])
}

model ROOM_STAFF {
  roomId         Int
  staffId        Int

  room           ROOM      @relation(fields: [roomId], references: [id])
  staff          STAFF     @relation(fields: [staffId], references: [id])

  @@id([roomId, staffId])
}

enum Role {
  STAFF
  CUSTOMER
}

enum Bank {
  KASIKORN
  SCB
  KRUNGTHAI
}

enum PetType {
  DOG
  CAT
  MOUSE
  RABBIT
  BIRD
}

enum Sex {
  MALE
  FEMALE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum BookingStatus {
  PENDING
  BOOKED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}